'use strict'

exports.render = render

const fs = require('fs')
const path = require('path')
const util = require('util')

const marked = require('marked')

const nenb = require('..')
const pkg = require('../package.json')

const log = require('./logger')(__filename)

const directives = nenb.directives
const fsWriteFile = util.promisify(fs.writeFile)

marked.setOptions({
  gfm: true,
  tables: true
})

async function render (fileName, sections) {
  log.debug(`rendering ${fileName}`)
  if (fileName.endsWith('.md')) fileName = fileName.substr(0, fileName.length - 3)
  fileName = `${fileName}.html`
  const lines = []

  const context = {
    data: {
      document: {}
    }
  }

  for (let section of sections) {
    if (section.isDirective()) {
      if (section.name === 'doc') {
        const directive = directives[section.name]
        directive.run(context, section.attrs)
      }
    }
  }

  generateHeader(context, sections, lines)
  generateBody(context, sections, lines)
  generateTrailer(context, sections, lines)

  const content = lines.join('\n')
  await fsWriteFile(fileName, content)

  return [fileName]
}

function generateBody (context, sections, lines) {
  lines.push('<script>')
  lines.push(`const data = {}`)
  lines.push('</script>')
  lines.push('')

  for (let section of sections) {
    // process directives
    if (section.isDirective()) {
      if (section.name === 'doc') continue

      const directive = directives[section.name]
      if (directive == null) {
        log(`no directive for ${escapeHtml(section.name)} available from ${getLocation(section)}, skipping`)
        continue
      }

      const content = directive.run(context, section.attrs)
      if (content == null) continue

      lines.push(content)
      lines.push('')
      continue
    }

    // process blocks
    if (section.getAttr('show') != null) {
      lines.push('<!-- block source -->')
      lines.push('<pre class=nenb>')
      for (let line of section.lines) lines.push(escapeHtml(line))
      lines.push('</pre>')
      lines.push('')
    }

    const directive = directives[`render-${section.lang}`]
    if (directive == null) {
      log(`no renderer for ${section.lang} available from ${getLocation(section)}, skipping`)
      continue
    }

    lines.push('<!-- block rendered -->')
    try {
      var output = directive.run(context, section.attrs, section.lines.join('\n'))
    } catch (err) {
      log(`error processing ${section.lang} from ${getLocation(section)}, skipping`)
      log(err)
      lines.push('<pre class=nenb-error>')
      lines.push(`error processing ${escapeHtml(section.lang)} from ${escapeHtml(getLocation(section))}`)
      lines.push(escapeHtml(err.toString()))
      lines.push('</pre>')
      lines.push('')
      continue
    }

    lines.push(output)
    lines.push('')
  }

  const attribution = []
  attribution.push('generated by')
  attribution.push(`<a href="${pkg.homepage}">${path.basename(pkg.name)}`)
  attribution.push(`${pkg.version}</a>`)
  attribution.push('on')
  attribution.push(new Date())

  lines.push('<div class="nenb-attribution"><p>')
  lines.push(attribution.join(' '))
  lines.push('</p></div>')
  lines.push('')
}

function escapeHtml (text) {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;')
    .replace(/\//g, '&#x2F;')
    .replace(/`/g, '&#x60;')
    .replace(/=/g, '&#x3D;')
}

function generateHeader (context, sections, lines) {
  const defaultCSS = getDefaultCSS()
  const title = context.data.document.title || 'untitled'
  const header = `
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible"        content="IE=edge">
<meta name="viewport"                     content="width=device-width">
<meta name="mobile-web-app-capable"       content="yes">
<meta name="apple-mobile-web-app-capable" content="yes">
<title>${title}</title>

<style>
${defaultCSS}
</style>

</head>
<body>`.trim()
  lines.push(header, '')
}

function generateTrailer (context, sections, lines) {
  lines.push('</body>')
  lines.push('</html>')
}

function getDefaultCSS () {
  const cssFileName = path.join(__dirname, 'default-style.css')
  const content = fs.readFileSync(cssFileName, 'utf8')
  return content.trim()
}

function getLocation (section) {
  return `${section.fileName}:${section.lineNumber}`
}
